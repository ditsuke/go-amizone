// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: v1/amizone.proto

package api_v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/typepb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{0}
}

type ClassScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *date.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ClassScheduleRequest) Reset() {
	*x = ClassScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassScheduleRequest) ProtoMessage() {}

func (x *ClassScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassScheduleRequest.ProtoReflect.Descriptor instead.
func (*ClassScheduleRequest) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{1}
}

func (x *ClassScheduleRequest) GetDate() *date.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type CourseRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CourseRef) Reset() {
	*x = CourseRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseRef) ProtoMessage() {}

func (x *CourseRef) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseRef.ProtoReflect.Descriptor instead.
func (*CourseRef) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{2}
}

func (x *CourseRef) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CourseRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// SemesterRef is a reference to a semester. References are used to avoid coupling the semester's name to the semester's ID.
// References can be retrieved through the GetSemesters RPC.
type SemesterRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SemesterRef string `protobuf:"bytes,1,opt,name=semester_ref,json=semesterRef,proto3" json:"semester_ref,omitempty"`
}

func (x *SemesterRef) Reset() {
	*x = SemesterRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemesterRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemesterRef) ProtoMessage() {}

func (x *SemesterRef) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemesterRef.ProtoReflect.Descriptor instead.
func (*SemesterRef) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{3}
}

func (x *SemesterRef) GetSemesterRef() string {
	if x != nil {
		return x.SemesterRef
	}
	return ""
}

// Attendance messages are embedded in other messages (Course, AttendanceRecord).
type Attendance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attended int32 `protobuf:"varint,1,opt,name=attended,proto3" json:"attended,omitempty"`
	Held     int32 `protobuf:"varint,2,opt,name=held,proto3" json:"held,omitempty"`
}

func (x *Attendance) Reset() {
	*x = Attendance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attendance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attendance) ProtoMessage() {}

func (x *Attendance) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attendance.ProtoReflect.Descriptor instead.
func (*Attendance) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{4}
}

func (x *Attendance) GetAttended() int32 {
	if x != nil {
		return x.Attended
	}
	return 0
}

func (x *Attendance) GetHeld() int32 {
	if x != nil {
		return x.Held
	}
	return 0
}

// Marks is a general message representing a student's marks (internal, external, total, etc). in a course or otherwise.
// It is embedded in other messages and its meaning is context-dependent.
type Marks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Have float32 `protobuf:"fixed32,1,opt,name=have,proto3" json:"have,omitempty"`
	Max  float32 `protobuf:"fixed32,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Marks) Reset() {
	*x = Marks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Marks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Marks) ProtoMessage() {}

func (x *Marks) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Marks.ProtoReflect.Descriptor instead.
func (*Marks) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{5}
}

func (x *Marks) GetHave() float32 {
	if x != nil {
		return x.Have
	}
	return 0
}

func (x *Marks) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// Course represents a course on Amizone.
type Course struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref           *CourseRef  `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Type          string      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Attendance    *Attendance `protobuf:"bytes,3,opt,name=attendance,proto3" json:"attendance,omitempty"`
	InternalMarks *Marks      `protobuf:"bytes,4,opt,name=internalMarks,proto3" json:"internalMarks,omitempty"`
	SyllabusDoc   string      `protobuf:"bytes,5,opt,name=syllabus_doc,json=syllabusDoc,proto3" json:"syllabus_doc,omitempty"`
}

func (x *Course) Reset() {
	*x = Course{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{6}
}

func (x *Course) GetRef() *CourseRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Course) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Course) GetAttendance() *Attendance {
	if x != nil {
		return x.Attendance
	}
	return nil
}

func (x *Course) GetInternalMarks() *Marks {
	if x != nil {
		return x.InternalMarks
	}
	return nil
}

func (x *Course) GetSyllabusDoc() string {
	if x != nil {
		return x.SyllabusDoc
	}
	return ""
}

// Courses are a list of courses, usually used to group together courses for a semester.
type Courses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Courses []*Course `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
}

func (x *Courses) Reset() {
	*x = Courses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Courses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Courses) ProtoMessage() {}

func (x *Courses) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Courses.ProtoReflect.Descriptor instead.
func (*Courses) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{7}
}

func (x *Courses) GetCourses() []*Course {
	if x != nil {
		return x.Courses
	}
	return nil
}

// AttendanceRecord represents a student's attendance for a course.
type AttendanceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attendance *Attendance `protobuf:"bytes,1,opt,name=attendance,proto3" json:"attendance,omitempty"`
	Course     *CourseRef  `protobuf:"bytes,2,opt,name=Course,proto3" json:"Course,omitempty"`
}

func (x *AttendanceRecord) Reset() {
	*x = AttendanceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttendanceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttendanceRecord) ProtoMessage() {}

func (x *AttendanceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttendanceRecord.ProtoReflect.Descriptor instead.
func (*AttendanceRecord) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{8}
}

func (x *AttendanceRecord) GetAttendance() *Attendance {
	if x != nil {
		return x.Attendance
	}
	return nil
}

func (x *AttendanceRecord) GetCourse() *CourseRef {
	if x != nil {
		return x.Course
	}
	return nil
}

// AttendanceRecords is a list of attendance records, usually representing attendance records for all
// courses in a semester.
type AttendanceRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*AttendanceRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *AttendanceRecords) Reset() {
	*x = AttendanceRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttendanceRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttendanceRecords) ProtoMessage() {}

func (x *AttendanceRecords) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttendanceRecords.ProtoReflect.Descriptor instead.
func (*AttendanceRecords) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{9}
}

func (x *AttendanceRecords) GetRecords() []*AttendanceRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// ScheduledClass represents a scheduled class.
type ScheduledClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Course    *CourseRef             `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Faculty   string                 `protobuf:"bytes,4,opt,name=faculty,proto3" json:"faculty,omitempty"`
	Room      string                 `protobuf:"bytes,5,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *ScheduledClass) Reset() {
	*x = ScheduledClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledClass) ProtoMessage() {}

func (x *ScheduledClass) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledClass.ProtoReflect.Descriptor instead.
func (*ScheduledClass) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{10}
}

func (x *ScheduledClass) GetCourse() *CourseRef {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *ScheduledClass) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ScheduledClass) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ScheduledClass) GetFaculty() string {
	if x != nil {
		return x.Faculty
	}
	return ""
}

func (x *ScheduledClass) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

// ScheduledClasses is a group of scheduled classes, usually used to represent daily class schedules.
type ScheduledClasses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classes []*ScheduledClass `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
}

func (x *ScheduledClasses) Reset() {
	*x = ScheduledClasses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledClasses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledClasses) ProtoMessage() {}

func (x *ScheduledClasses) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledClasses.ProtoReflect.Descriptor instead.
func (*ScheduledClasses) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{11}
}

func (x *ScheduledClasses) GetClasses() []*ScheduledClass {
	if x != nil {
		return x.Classes
	}
	return nil
}

// AmizoneDiaryEvent models an event from the amizone "diary" API.
type AmizoneDiaryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	CourseCode string `protobuf:"bytes,2,opt,name=CourseCode,proto3" json:"CourseCode,omitempty"`
	CourseName string `protobuf:"bytes,3,opt,name=CourseName,proto3" json:"CourseName,omitempty"`
	Faculty    string `protobuf:"bytes,4,opt,name=Faculty,proto3" json:"Faculty,omitempty"`
	Room       string `protobuf:"bytes,5,opt,name=Room,proto3" json:"Room,omitempty"`
	Start      string `protobuf:"bytes,6,opt,name=Start,proto3" json:"Start,omitempty"`
	End        string `protobuf:"bytes,7,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *AmizoneDiaryEvent) Reset() {
	*x = AmizoneDiaryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmizoneDiaryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmizoneDiaryEvent) ProtoMessage() {}

func (x *AmizoneDiaryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmizoneDiaryEvent.ProtoReflect.Descriptor instead.
func (*AmizoneDiaryEvent) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{12}
}

func (x *AmizoneDiaryEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AmizoneDiaryEvent) GetCourseCode() string {
	if x != nil {
		return x.CourseCode
	}
	return ""
}

func (x *AmizoneDiaryEvent) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *AmizoneDiaryEvent) GetFaculty() string {
	if x != nil {
		return x.Faculty
	}
	return ""
}

func (x *AmizoneDiaryEvent) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *AmizoneDiaryEvent) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *AmizoneDiaryEvent) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type ScheduledExam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Course *CourseRef             `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
	Time   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Mode   string                 `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *ScheduledExam) Reset() {
	*x = ScheduledExam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledExam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledExam) ProtoMessage() {}

func (x *ScheduledExam) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledExam.ProtoReflect.Descriptor instead.
func (*ScheduledExam) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{13}
}

func (x *ScheduledExam) GetCourse() *CourseRef {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *ScheduledExam) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ScheduledExam) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type ExaminationSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Exams []*ScheduledExam `protobuf:"bytes,2,rep,name=exams,proto3" json:"exams,omitempty"`
}

func (x *ExaminationSchedule) Reset() {
	*x = ExaminationSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExaminationSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExaminationSchedule) ProtoMessage() {}

func (x *ExaminationSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExaminationSchedule.ProtoReflect.Descriptor instead.
func (*ExaminationSchedule) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{14}
}

func (x *ExaminationSchedule) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExaminationSchedule) GetExams() []*ScheduledExam {
	if x != nil {
		return x.Exams
	}
	return nil
}

// Profile models information exposed by the Amizone ID card page
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EnrollmentNumber   string                 `protobuf:"bytes,2,opt,name=enrollment_number,json=enrollmentNumber,proto3" json:"enrollment_number,omitempty"`
	EnrollmentValidity *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=enrollment_validity,json=enrollmentValidity,proto3" json:"enrollment_validity,omitempty"`
	Batch              string                 `protobuf:"bytes,4,opt,name=batch,proto3" json:"batch,omitempty"`
	Program            string                 `protobuf:"bytes,5,opt,name=program,proto3" json:"program,omitempty"`
	DateOfBirth        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	BloodGroup         string                 `protobuf:"bytes,7,opt,name=blood_group,json=bloodGroup,proto3" json:"blood_group,omitempty"`
	IdCardNumber       string                 `protobuf:"bytes,8,opt,name=id_card_number,json=idCardNumber,proto3" json:"id_card_number,omitempty"`
	Uuid               string                 `protobuf:"bytes,9,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{15}
}

func (x *Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Profile) GetEnrollmentNumber() string {
	if x != nil {
		return x.EnrollmentNumber
	}
	return ""
}

func (x *Profile) GetEnrollmentValidity() *timestamppb.Timestamp {
	if x != nil {
		return x.EnrollmentValidity
	}
	return nil
}

func (x *Profile) GetBatch() string {
	if x != nil {
		return x.Batch
	}
	return ""
}

func (x *Profile) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *Profile) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *Profile) GetBloodGroup() string {
	if x != nil {
		return x.BloodGroup
	}
	return ""
}

func (x *Profile) GetIdCardNumber() string {
	if x != nil {
		return x.IdCardNumber
	}
	return ""
}

func (x *Profile) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Semester models a semester reference on Amizone. We include both a semester "name" / label and a ref
// to decouple the way they're represented from their form values. These happen to be same at the time of
// modelling, however, so they might appear duplicitous.
type Semester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ref  string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *Semester) Reset() {
	*x = Semester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Semester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Semester) ProtoMessage() {}

func (x *Semester) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Semester.ProtoReflect.Descriptor instead.
func (*Semester) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{16}
}

func (x *Semester) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Semester) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type SemesterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Semesters []*Semester `protobuf:"bytes,1,rep,name=semesters,proto3" json:"semesters,omitempty"`
}

func (x *SemesterList) Reset() {
	*x = SemesterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_amizone_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemesterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemesterList) ProtoMessage() {}

func (x *SemesterList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_amizone_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemesterList.ProtoReflect.Descriptor instead.
func (*SemesterList) Descriptor() ([]byte, []int) {
	return file_v1_amizone_proto_rawDescGZIP(), []int{17}
}

func (x *SemesterList) GetSemesters() []*Semester {
	if x != nil {
		return x.Semesters
	}
	return nil
}

var File_v1_amizone_proto protoreflect.FileDescriptor

var file_v1_amizone_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1a, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e,
	0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d,
	0x0a, 0x14, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x33, 0x0a,
	0x09, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x30, 0x0a, 0x0b, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x22, 0x3c, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x65,
	0x6c, 0x64, 0x22, 0x2d, 0x0a, 0x05, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x61, 0x76, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x22, 0x89, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x03,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x5f, 0x61,
	0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x47, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d,
	0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x44, 0x6f, 0x63, 0x22, 0x47, 0x0a,
	0x07, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x5f, 0x61,
	0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x52, 0x06, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x22, 0x5b, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d,
	0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0xed, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22,
	0x58, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x41, 0x6d,
	0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x6c,
	0x0a, 0x13, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x5f,
	0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x22, 0xe2, 0x02, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x30, 0x0a, 0x08, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x22, 0x52, 0x0a, 0x0c, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x09, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0xdf, 0x06, 0x0a, 0x0e, 0x41, 0x6d, 0x69, 0x7a,
	0x6f, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x67,
	0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0xb6, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d,
	0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x79, 0x65, 0x61,
	0x72, 0x7d, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x7d, 0x2f,
	0x7b, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x61, 0x79, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28,
	0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d,
	0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d,
	0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x1a,
	0x23, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x73, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x7d, 0x12, 0x7b, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x2e, 0x67, 0x6f,
	0x5f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x42, 0xe3, 0x03, 0x5a, 0x32, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x74, 0x73, 0x75, 0x6b, 0x65,
	0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31,
	0x92, 0x41, 0xab, 0x03, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x41, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65,
	0x20, 0x41, 0x50, 0x49, 0x22, 0x34, 0x0a, 0x07, 0x64, 0x69, 0x74, 0x73, 0x75, 0x6b, 0x65, 0x12,
	0x1a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x74, 0x73, 0x75, 0x6b, 0x65, 0x1a, 0x0d, 0x64, 0x69, 0x74,
	0x73, 0x75, 0x6b, 0x65, 0x40, 0x70, 0x6d, 0x2e, 0x6d, 0x65, 0x2a, 0x42, 0x0a, 0x07, 0x47, 0x50,
	0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x74, 0x73, 0x75, 0x6b,
	0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x62, 0x6c, 0x6f,
	0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03,
	0x30, 0x2e, 0x32, 0x1a, 0x0f, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x66, 0x6c, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x50, 0x0a, 0x03,
	0x34, 0x30, 0x33, 0x12, 0x49, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f,
	0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x5a, 0x3b,
	0x0a, 0x39, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2c, 0x08,
	0x01, 0x12, 0x28, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x2e,
	0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x65, 0x64, 0x75, 0x62, 0x12, 0x0a, 0x10, 0x0a,
	0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x03, 0x0a, 0x01, 0x2a, 0x72,
	0x3e, 0x0a, 0x15, 0x4d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x6f,
	0x2d, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x74,
	0x73, 0x75, 0x6b, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x6d, 0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_amizone_proto_rawDescOnce sync.Once
	file_v1_amizone_proto_rawDescData = file_v1_amizone_proto_rawDesc
)

func file_v1_amizone_proto_rawDescGZIP() []byte {
	file_v1_amizone_proto_rawDescOnce.Do(func() {
		file_v1_amizone_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_amizone_proto_rawDescData)
	})
	return file_v1_amizone_proto_rawDescData
}

var file_v1_amizone_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_v1_amizone_proto_goTypes = []interface{}{
	(*EmptyMessage)(nil),          // 0: go_amizone.server.proto.v1.EmptyMessage
	(*ClassScheduleRequest)(nil),  // 1: go_amizone.server.proto.v1.ClassScheduleRequest
	(*CourseRef)(nil),             // 2: go_amizone.server.proto.v1.CourseRef
	(*SemesterRef)(nil),           // 3: go_amizone.server.proto.v1.SemesterRef
	(*Attendance)(nil),            // 4: go_amizone.server.proto.v1.Attendance
	(*Marks)(nil),                 // 5: go_amizone.server.proto.v1.Marks
	(*Course)(nil),                // 6: go_amizone.server.proto.v1.Course
	(*Courses)(nil),               // 7: go_amizone.server.proto.v1.Courses
	(*AttendanceRecord)(nil),      // 8: go_amizone.server.proto.v1.AttendanceRecord
	(*AttendanceRecords)(nil),     // 9: go_amizone.server.proto.v1.AttendanceRecords
	(*ScheduledClass)(nil),        // 10: go_amizone.server.proto.v1.ScheduledClass
	(*ScheduledClasses)(nil),      // 11: go_amizone.server.proto.v1.ScheduledClasses
	(*AmizoneDiaryEvent)(nil),     // 12: go_amizone.server.proto.v1.AmizoneDiaryEvent
	(*ScheduledExam)(nil),         // 13: go_amizone.server.proto.v1.ScheduledExam
	(*ExaminationSchedule)(nil),   // 14: go_amizone.server.proto.v1.ExaminationSchedule
	(*Profile)(nil),               // 15: go_amizone.server.proto.v1.Profile
	(*Semester)(nil),              // 16: go_amizone.server.proto.v1.Semester
	(*SemesterList)(nil),          // 17: go_amizone.server.proto.v1.SemesterList
	(*date.Date)(nil),             // 18: google.type.Date
	(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
}
var file_v1_amizone_proto_depIdxs = []int32{
	18, // 0: go_amizone.server.proto.v1.ClassScheduleRequest.date:type_name -> google.type.Date
	2,  // 1: go_amizone.server.proto.v1.Course.ref:type_name -> go_amizone.server.proto.v1.CourseRef
	4,  // 2: go_amizone.server.proto.v1.Course.attendance:type_name -> go_amizone.server.proto.v1.Attendance
	5,  // 3: go_amizone.server.proto.v1.Course.internalMarks:type_name -> go_amizone.server.proto.v1.Marks
	6,  // 4: go_amizone.server.proto.v1.Courses.courses:type_name -> go_amizone.server.proto.v1.Course
	4,  // 5: go_amizone.server.proto.v1.AttendanceRecord.attendance:type_name -> go_amizone.server.proto.v1.Attendance
	2,  // 6: go_amizone.server.proto.v1.AttendanceRecord.Course:type_name -> go_amizone.server.proto.v1.CourseRef
	8,  // 7: go_amizone.server.proto.v1.AttendanceRecords.records:type_name -> go_amizone.server.proto.v1.AttendanceRecord
	2,  // 8: go_amizone.server.proto.v1.ScheduledClass.course:type_name -> go_amizone.server.proto.v1.CourseRef
	19, // 9: go_amizone.server.proto.v1.ScheduledClass.startTime:type_name -> google.protobuf.Timestamp
	19, // 10: go_amizone.server.proto.v1.ScheduledClass.endTime:type_name -> google.protobuf.Timestamp
	10, // 11: go_amizone.server.proto.v1.ScheduledClasses.classes:type_name -> go_amizone.server.proto.v1.ScheduledClass
	2,  // 12: go_amizone.server.proto.v1.ScheduledExam.course:type_name -> go_amizone.server.proto.v1.CourseRef
	19, // 13: go_amizone.server.proto.v1.ScheduledExam.time:type_name -> google.protobuf.Timestamp
	13, // 14: go_amizone.server.proto.v1.ExaminationSchedule.exams:type_name -> go_amizone.server.proto.v1.ScheduledExam
	19, // 15: go_amizone.server.proto.v1.Profile.enrollment_validity:type_name -> google.protobuf.Timestamp
	19, // 16: go_amizone.server.proto.v1.Profile.date_of_birth:type_name -> google.protobuf.Timestamp
	16, // 17: go_amizone.server.proto.v1.SemesterList.semesters:type_name -> go_amizone.server.proto.v1.Semester
	0,  // 18: go_amizone.server.proto.v1.AmizoneService.GetAttendance:input_type -> go_amizone.server.proto.v1.EmptyMessage
	1,  // 19: go_amizone.server.proto.v1.AmizoneService.GetClassSchedule:input_type -> go_amizone.server.proto.v1.ClassScheduleRequest
	0,  // 20: go_amizone.server.proto.v1.AmizoneService.GetExamSchedule:input_type -> go_amizone.server.proto.v1.EmptyMessage
	0,  // 21: go_amizone.server.proto.v1.AmizoneService.GetSemesters:input_type -> go_amizone.server.proto.v1.EmptyMessage
	3,  // 22: go_amizone.server.proto.v1.AmizoneService.GetCourses:input_type -> go_amizone.server.proto.v1.SemesterRef
	0,  // 23: go_amizone.server.proto.v1.AmizoneService.GetCurrentCourses:input_type -> go_amizone.server.proto.v1.EmptyMessage
	9,  // 24: go_amizone.server.proto.v1.AmizoneService.GetAttendance:output_type -> go_amizone.server.proto.v1.AttendanceRecords
	11, // 25: go_amizone.server.proto.v1.AmizoneService.GetClassSchedule:output_type -> go_amizone.server.proto.v1.ScheduledClasses
	14, // 26: go_amizone.server.proto.v1.AmizoneService.GetExamSchedule:output_type -> go_amizone.server.proto.v1.ExaminationSchedule
	17, // 27: go_amizone.server.proto.v1.AmizoneService.GetSemesters:output_type -> go_amizone.server.proto.v1.SemesterList
	7,  // 28: go_amizone.server.proto.v1.AmizoneService.GetCourses:output_type -> go_amizone.server.proto.v1.Courses
	7,  // 29: go_amizone.server.proto.v1.AmizoneService.GetCurrentCourses:output_type -> go_amizone.server.proto.v1.Courses
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_v1_amizone_proto_init() }
func file_v1_amizone_proto_init() {
	if File_v1_amizone_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_amizone_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemesterRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attendance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Marks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Course); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Courses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttendanceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttendanceRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledClasses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmizoneDiaryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledExam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExaminationSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Semester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_amizone_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemesterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_amizone_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_amizone_proto_goTypes,
		DependencyIndexes: file_v1_amizone_proto_depIdxs,
		MessageInfos:      file_v1_amizone_proto_msgTypes,
	}.Build()
	File_v1_amizone_proto = out.File
	file_v1_amizone_proto_rawDesc = nil
	file_v1_amizone_proto_goTypes = nil
	file_v1_amizone_proto_depIdxs = nil
}
